version: '3.8'
services:
  writer:
    env_file:
      - .env
    environment:
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      PORT: ${WRTR_PORT}
      CMS_POST_KEY_1: ${CMS_POST_KEY_1}
      CMS_URL: "${CMS_URL}:${CMS_PORT}"
    build: 
      context: ./apps/writer
      dockerfile: Dockerfile
    networks:
      - api
    ports:
      - "${WRTR_PORT}:${WRTR_PORT}"
    volumes:
      - ./apps/writer:/app
  cms:
    build:
      context: ./apps/cms
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      NODE_ENV: ${CMS_NODE_ENV}
      HOST: ${CMS_HOST}
      PORT: ${CMS_PORT}
      DATABASE_CLIENT: ${CMS_DB_CLIENT}
      DATABASE_HOST: postgres
      DATABASE_PORT: ${CMS_DB_PORT}
      DATABASE_NAME: ${CMS_DB_NAME}
      DATABASE_USERNAME: ${CMS_DB_USER}
      DATABASE_PASSWORD: ${CMS_DB_PW}
      DATABASE_SSL: ${CMS_DB_SSL}
      APP_KEYS: ${CMS_APP_KEYS}
      API_TOKEN_SALT: ${CMS_API_TOKEN_SALT}
      ADMIN_JWT_SECRET: ${CMS_ADMIN_JWT_SECRET}
      TRANSFER_TOKEN_SALT: ${CMS_TRANSFER_TOKEN_SALT}
      JWT_SECRET: ${CMS_JWT_SECRET}
    ports:
      - "${CMS_PORT}:${CMS_PORT}"
    volumes:
      - ./apps/cms:/opt/app
      - /opt/app/node_modules
      - /opt/app/.cache
      - /opt/app/build
      - /opt/app/dist
    working_dir: /opt/app
    networks:
      - internal
      - api
    depends_on:
      postgres:
        condition: service_healthy
  postgres:
    image: postgres:13
    environment:
      POSTGRES_DB: ${CMS_DB_NAME}
      POSTGRES_USER: ${CMS_DB_USER}
      POSTGRES_PASSWORD: ${CMS_DB_PW}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${CMS_DB_USER} -d ${CMS_DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
networks:
  internal:
    internal: true
  api:

volumes:
  postgres-data:
